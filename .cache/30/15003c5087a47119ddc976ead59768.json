{"id":"node_modules/konva/lib/Factory.js","dependencies":[{"name":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\package.json","includedInParent":true,"mtime":1593283881516},{"name":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\package.json","includedInParent":true,"mtime":1593215474632},{"name":"./Util","loc":{"line":3,"column":21},"parent":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\lib\\Factory.js","resolved":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\lib\\Util.js"},{"name":"./Validators","loc":{"line":4,"column":27},"parent":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\lib\\Factory.js","resolved":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\lib\\Validators.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Util_1 = require(\"./Util\");\nvar Validators_1 = require(\"./Validators\");\nvar GET = 'get', SET = 'set';\nexports.Factory = {\n    addGetterSetter: function (constructor, attr, def, validator, after) {\n        exports.Factory.addGetter(constructor, attr, def);\n        exports.Factory.addSetter(constructor, attr, validator, after);\n        exports.Factory.addOverloadedGetterSetter(constructor, attr);\n    },\n    addGetter: function (constructor, attr, def) {\n        var method = GET + Util_1.Util._capitalize(attr);\n        constructor.prototype[method] =\n            constructor.prototype[method] ||\n                function () {\n                    var val = this.attrs[attr];\n                    return val === undefined ? def : val;\n                };\n    },\n    addSetter: function (constructor, attr, validator, after) {\n        var method = SET + Util_1.Util._capitalize(attr);\n        if (!constructor.prototype[method]) {\n            exports.Factory.overWriteSetter(constructor, attr, validator, after);\n        }\n    },\n    overWriteSetter: function (constructor, attr, validator, after) {\n        var method = SET + Util_1.Util._capitalize(attr);\n        constructor.prototype[method] = function (val) {\n            if (validator && val !== undefined && val !== null) {\n                val = validator.call(this, val, attr);\n            }\n            this._setAttr(attr, val);\n            if (after) {\n                after.call(this);\n            }\n            return this;\n        };\n    },\n    addComponentsGetterSetter: function (constructor, attr, components, validator, after) {\n        var len = components.length, capitalize = Util_1.Util._capitalize, getter = GET + capitalize(attr), setter = SET + capitalize(attr), n, component;\n        constructor.prototype[getter] = function () {\n            var ret = {};\n            for (n = 0; n < len; n++) {\n                component = components[n];\n                ret[component] = this.getAttr(attr + capitalize(component));\n            }\n            return ret;\n        };\n        var basicValidator = Validators_1.getComponentValidator(components);\n        constructor.prototype[setter] = function (val) {\n            var oldVal = this.attrs[attr], key;\n            if (validator) {\n                val = validator.call(this, val);\n            }\n            if (basicValidator) {\n                basicValidator.call(this, val, attr);\n            }\n            for (key in val) {\n                if (!val.hasOwnProperty(key)) {\n                    continue;\n                }\n                this._setAttr(attr + capitalize(key), val[key]);\n            }\n            this._fireChangeEvent(attr, oldVal, val);\n            if (after) {\n                after.call(this);\n            }\n            return this;\n        };\n        exports.Factory.addOverloadedGetterSetter(constructor, attr);\n    },\n    addOverloadedGetterSetter: function (constructor, attr) {\n        var capitalizedAttr = Util_1.Util._capitalize(attr), setter = SET + capitalizedAttr, getter = GET + capitalizedAttr;\n        constructor.prototype[attr] = function () {\n            if (arguments.length) {\n                this[setter](arguments[0]);\n                return this;\n            }\n            return this[getter]();\n        };\n    },\n    addDeprecatedGetterSetter: function (constructor, attr, def, validator) {\n        Util_1.Util.error('Adding deprecated ' + attr);\n        var method = GET + Util_1.Util._capitalize(attr);\n        var message = attr +\n            ' property is deprecated and will be removed soon. Look at Konva change log for more information.';\n        constructor.prototype[method] = function () {\n            Util_1.Util.error(message);\n            var val = this.attrs[attr];\n            return val === undefined ? def : val;\n        };\n        exports.Factory.addSetter(constructor, attr, validator, function () {\n            Util_1.Util.error(message);\n        });\n        exports.Factory.addOverloadedGetterSetter(constructor, attr);\n    },\n    backCompat: function (constructor, methods) {\n        Util_1.Util.each(methods, function (oldMethodName, newMethodName) {\n            var method = constructor.prototype[newMethodName];\n            var oldGetter = GET + Util_1.Util._capitalize(oldMethodName);\n            var oldSetter = SET + Util_1.Util._capitalize(oldMethodName);\n            function deprecated() {\n                method.apply(this, arguments);\n                Util_1.Util.error('\"' +\n                    oldMethodName +\n                    '\" method is deprecated and will be removed soon. Use \"\"' +\n                    newMethodName +\n                    '\" instead.');\n            }\n            constructor.prototype[oldMethodName] = deprecated;\n            constructor.prototype[oldGetter] = deprecated;\n            constructor.prototype[oldSetter] = deprecated;\n        });\n    },\n    afterSetFilter: function () {\n        this._filterUpToDate = false;\n    },\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/konva/lib/Factory.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/konva/lib/Factory.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}}],"sources":{"node_modules/konva/lib/Factory.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Util_1 = require(\"./Util\");\nvar Validators_1 = require(\"./Validators\");\nvar GET = 'get', SET = 'set';\nexports.Factory = {\n    addGetterSetter: function (constructor, attr, def, validator, after) {\n        exports.Factory.addGetter(constructor, attr, def);\n        exports.Factory.addSetter(constructor, attr, validator, after);\n        exports.Factory.addOverloadedGetterSetter(constructor, attr);\n    },\n    addGetter: function (constructor, attr, def) {\n        var method = GET + Util_1.Util._capitalize(attr);\n        constructor.prototype[method] =\n            constructor.prototype[method] ||\n                function () {\n                    var val = this.attrs[attr];\n                    return val === undefined ? def : val;\n                };\n    },\n    addSetter: function (constructor, attr, validator, after) {\n        var method = SET + Util_1.Util._capitalize(attr);\n        if (!constructor.prototype[method]) {\n            exports.Factory.overWriteSetter(constructor, attr, validator, after);\n        }\n    },\n    overWriteSetter: function (constructor, attr, validator, after) {\n        var method = SET + Util_1.Util._capitalize(attr);\n        constructor.prototype[method] = function (val) {\n            if (validator && val !== undefined && val !== null) {\n                val = validator.call(this, val, attr);\n            }\n            this._setAttr(attr, val);\n            if (after) {\n                after.call(this);\n            }\n            return this;\n        };\n    },\n    addComponentsGetterSetter: function (constructor, attr, components, validator, after) {\n        var len = components.length, capitalize = Util_1.Util._capitalize, getter = GET + capitalize(attr), setter = SET + capitalize(attr), n, component;\n        constructor.prototype[getter] = function () {\n            var ret = {};\n            for (n = 0; n < len; n++) {\n                component = components[n];\n                ret[component] = this.getAttr(attr + capitalize(component));\n            }\n            return ret;\n        };\n        var basicValidator = Validators_1.getComponentValidator(components);\n        constructor.prototype[setter] = function (val) {\n            var oldVal = this.attrs[attr], key;\n            if (validator) {\n                val = validator.call(this, val);\n            }\n            if (basicValidator) {\n                basicValidator.call(this, val, attr);\n            }\n            for (key in val) {\n                if (!val.hasOwnProperty(key)) {\n                    continue;\n                }\n                this._setAttr(attr + capitalize(key), val[key]);\n            }\n            this._fireChangeEvent(attr, oldVal, val);\n            if (after) {\n                after.call(this);\n            }\n            return this;\n        };\n        exports.Factory.addOverloadedGetterSetter(constructor, attr);\n    },\n    addOverloadedGetterSetter: function (constructor, attr) {\n        var capitalizedAttr = Util_1.Util._capitalize(attr), setter = SET + capitalizedAttr, getter = GET + capitalizedAttr;\n        constructor.prototype[attr] = function () {\n            if (arguments.length) {\n                this[setter](arguments[0]);\n                return this;\n            }\n            return this[getter]();\n        };\n    },\n    addDeprecatedGetterSetter: function (constructor, attr, def, validator) {\n        Util_1.Util.error('Adding deprecated ' + attr);\n        var method = GET + Util_1.Util._capitalize(attr);\n        var message = attr +\n            ' property is deprecated and will be removed soon. Look at Konva change log for more information.';\n        constructor.prototype[method] = function () {\n            Util_1.Util.error(message);\n            var val = this.attrs[attr];\n            return val === undefined ? def : val;\n        };\n        exports.Factory.addSetter(constructor, attr, validator, function () {\n            Util_1.Util.error(message);\n        });\n        exports.Factory.addOverloadedGetterSetter(constructor, attr);\n    },\n    backCompat: function (constructor, methods) {\n        Util_1.Util.each(methods, function (oldMethodName, newMethodName) {\n            var method = constructor.prototype[newMethodName];\n            var oldGetter = GET + Util_1.Util._capitalize(oldMethodName);\n            var oldSetter = SET + Util_1.Util._capitalize(oldMethodName);\n            function deprecated() {\n                method.apply(this, arguments);\n                Util_1.Util.error('\"' +\n                    oldMethodName +\n                    '\" method is deprecated and will be removed soon. Use \"\"' +\n                    newMethodName +\n                    '\" instead.');\n            }\n            constructor.prototype[oldMethodName] = deprecated;\n            constructor.prototype[oldGetter] = deprecated;\n            constructor.prototype[oldSetter] = deprecated;\n        });\n    },\n    afterSetFilter: function () {\n        this._filterUpToDate = false;\n    },\n};\n"},"lineCount":120}},"error":null,"hash":"d830a455d6cfd3bee358803a42ae5dfd","cacheData":{"env":{}}}