{"id":"node_modules/konva/lib/shapes/Path.js","dependencies":[{"name":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\package.json","includedInParent":true,"mtime":1593283881516},{"name":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\package.json","includedInParent":true,"mtime":1593215474632},{"name":"../Util","loc":{"line":16,"column":21},"parent":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\lib\\shapes\\Path.js","resolved":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\lib\\Util.js"},{"name":"../Factory","loc":{"line":17,"column":24},"parent":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\lib\\shapes\\Path.js","resolved":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\lib\\Factory.js"},{"name":"../Shape","loc":{"line":18,"column":22},"parent":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\lib\\shapes\\Path.js","resolved":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\lib\\Shape.js"},{"name":"../Global","loc":{"line":19,"column":23},"parent":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\lib\\shapes\\Path.js","resolved":"C:\\Users\\Peter\\coding_home\\playingDir\\konvaPlay\\node_modules\\konva\\lib\\Global.js"}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Util_1 = require(\"../Util\");\nvar Factory_1 = require(\"../Factory\");\nvar Shape_1 = require(\"../Shape\");\nvar Global_1 = require(\"../Global\");\nvar Path = (function (_super) {\n    __extends(Path, _super);\n    function Path(config) {\n        var _this = _super.call(this, config) || this;\n        _this.dataArray = [];\n        _this.pathLength = 0;\n        _this.dataArray = Path.parsePathData(_this.data());\n        _this.pathLength = 0;\n        for (var i = 0; i < _this.dataArray.length; ++i) {\n            _this.pathLength += _this.dataArray[i].pathLength;\n        }\n        _this.on('dataChange.konva', function () {\n            this.dataArray = Path.parsePathData(this.data());\n            this.pathLength = 0;\n            for (var i = 0; i < this.dataArray.length; ++i) {\n                this.pathLength += this.dataArray[i].pathLength;\n            }\n        });\n        return _this;\n    }\n    Path.prototype._sceneFunc = function (context) {\n        var ca = this.dataArray;\n        context.beginPath();\n        var isClosed = false;\n        for (var n = 0; n < ca.length; n++) {\n            var c = ca[n].command;\n            var p = ca[n].points;\n            switch (c) {\n                case 'L':\n                    context.lineTo(p[0], p[1]);\n                    break;\n                case 'M':\n                    context.moveTo(p[0], p[1]);\n                    break;\n                case 'C':\n                    context.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);\n                    break;\n                case 'Q':\n                    context.quadraticCurveTo(p[0], p[1], p[2], p[3]);\n                    break;\n                case 'A':\n                    var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6], fs = p[7];\n                    var r = rx > ry ? rx : ry;\n                    var scaleX = rx > ry ? 1 : rx / ry;\n                    var scaleY = rx > ry ? ry / rx : 1;\n                    context.translate(cx, cy);\n                    context.rotate(psi);\n                    context.scale(scaleX, scaleY);\n                    context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);\n                    context.scale(1 / scaleX, 1 / scaleY);\n                    context.rotate(-psi);\n                    context.translate(-cx, -cy);\n                    break;\n                case 'z':\n                    isClosed = true;\n                    context.closePath();\n                    break;\n            }\n        }\n        if (!isClosed && !this.hasFill()) {\n            context.strokeShape(this);\n        }\n        else {\n            context.fillStrokeShape(this);\n        }\n    };\n    Path.prototype.getSelfRect = function () {\n        var points = [];\n        this.dataArray.forEach(function (data) {\n            if (data.command === 'A') {\n                var start = data.points[4];\n                var dTheta = data.points[5];\n                var end = data.points[4] + dTheta;\n                var inc = Math.PI / 180.0;\n                if (Math.abs(start - end) < inc) {\n                    inc = Math.abs(start - end);\n                }\n                if (dTheta < 0) {\n                    for (var t = start - inc; t > end; t -= inc) {\n                        var point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);\n                        points.push(point.x, point.y);\n                    }\n                }\n                else {\n                    for (var t = start + inc; t < end; t += inc) {\n                        var point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);\n                        points.push(point.x, point.y);\n                    }\n                }\n            }\n            else if (data.command === 'C') {\n                for (var t = 0.0; t <= 1; t += 0.01) {\n                    var point = Path.getPointOnCubicBezier(t, data.start.x, data.start.y, data.points[0], data.points[1], data.points[2], data.points[3], data.points[4], data.points[5]);\n                    points.push(point.x, point.y);\n                }\n            }\n            else {\n                points = points.concat(data.points);\n            }\n        });\n        var minX = points[0];\n        var maxX = points[0];\n        var minY = points[1];\n        var maxY = points[1];\n        var x, y;\n        for (var i = 0; i < points.length / 2; i++) {\n            x = points[i * 2];\n            y = points[i * 2 + 1];\n            if (!isNaN(x)) {\n                minX = Math.min(minX, x);\n                maxX = Math.max(maxX, x);\n            }\n            if (!isNaN(y)) {\n                minY = Math.min(minY, y);\n                maxY = Math.max(maxY, y);\n            }\n        }\n        return {\n            x: Math.round(minX),\n            y: Math.round(minY),\n            width: Math.round(maxX - minX),\n            height: Math.round(maxY - minY)\n        };\n    };\n    Path.prototype.getLength = function () {\n        return this.pathLength;\n    };\n    Path.prototype.getPointAtLength = function (length) {\n        var point, i = 0, ii = this.dataArray.length;\n        if (!ii) {\n            return null;\n        }\n        while (i < ii && length > this.dataArray[i].pathLength) {\n            length -= this.dataArray[i].pathLength;\n            ++i;\n        }\n        if (i === ii) {\n            point = this.dataArray[i - 1].points.slice(-2);\n            return {\n                x: point[0],\n                y: point[1]\n            };\n        }\n        if (length < 0.01) {\n            point = this.dataArray[i].points.slice(0, 2);\n            return {\n                x: point[0],\n                y: point[1]\n            };\n        }\n        var cp = this.dataArray[i];\n        var p = cp.points;\n        switch (cp.command) {\n            case 'L':\n                return Path.getPointOnLine(length, cp.start.x, cp.start.y, p[0], p[1]);\n            case 'C':\n                return Path.getPointOnCubicBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3], p[4], p[5]);\n            case 'Q':\n                return Path.getPointOnQuadraticBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3]);\n            case 'A':\n                var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6];\n                theta += (dTheta * length) / cp.pathLength;\n                return Path.getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi);\n        }\n        return null;\n    };\n    Path.getLineLength = function (x1, y1, x2, y2) {\n        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    };\n    Path.getPointOnLine = function (dist, P1x, P1y, P2x, P2y, fromX, fromY) {\n        if (fromX === undefined) {\n            fromX = P1x;\n        }\n        if (fromY === undefined) {\n            fromY = P1y;\n        }\n        var m = (P2y - P1y) / (P2x - P1x + 0.00000001);\n        var run = Math.sqrt((dist * dist) / (1 + m * m));\n        if (P2x < P1x) {\n            run *= -1;\n        }\n        var rise = m * run;\n        var pt;\n        if (P2x === P1x) {\n            pt = {\n                x: fromX,\n                y: fromY + rise\n            };\n        }\n        else if ((fromY - P1y) / (fromX - P1x + 0.00000001) === m) {\n            pt = {\n                x: fromX + run,\n                y: fromY + rise\n            };\n        }\n        else {\n            var ix, iy;\n            var len = this.getLineLength(P1x, P1y, P2x, P2y);\n            if (len < 0.00000001) {\n                return undefined;\n            }\n            var u = (fromX - P1x) * (P2x - P1x) + (fromY - P1y) * (P2y - P1y);\n            u = u / (len * len);\n            ix = P1x + u * (P2x - P1x);\n            iy = P1y + u * (P2y - P1y);\n            var pRise = this.getLineLength(fromX, fromY, ix, iy);\n            var pRun = Math.sqrt(dist * dist - pRise * pRise);\n            run = Math.sqrt((pRun * pRun) / (1 + m * m));\n            if (P2x < P1x) {\n                run *= -1;\n            }\n            rise = m * run;\n            pt = {\n                x: ix + run,\n                y: iy + rise\n            };\n        }\n        return pt;\n    };\n    Path.getPointOnCubicBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {\n        function CB1(t) {\n            return t * t * t;\n        }\n        function CB2(t) {\n            return 3 * t * t * (1 - t);\n        }\n        function CB3(t) {\n            return 3 * t * (1 - t) * (1 - t);\n        }\n        function CB4(t) {\n            return (1 - t) * (1 - t) * (1 - t);\n        }\n        var x = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);\n        var y = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);\n        return {\n            x: x,\n            y: y\n        };\n    };\n    Path.getPointOnQuadraticBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y) {\n        function QB1(t) {\n            return t * t;\n        }\n        function QB2(t) {\n            return 2 * t * (1 - t);\n        }\n        function QB3(t) {\n            return (1 - t) * (1 - t);\n        }\n        var x = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);\n        var y = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);\n        return {\n            x: x,\n            y: y\n        };\n    };\n    Path.getPointOnEllipticalArc = function (cx, cy, rx, ry, theta, psi) {\n        var cosPsi = Math.cos(psi), sinPsi = Math.sin(psi);\n        var pt = {\n            x: rx * Math.cos(theta),\n            y: ry * Math.sin(theta)\n        };\n        return {\n            x: cx + (pt.x * cosPsi - pt.y * sinPsi),\n            y: cy + (pt.x * sinPsi + pt.y * cosPsi)\n        };\n    };\n    Path.parsePathData = function (data) {\n        if (!data) {\n            return [];\n        }\n        var cs = data;\n        var cc = [\n            'm',\n            'M',\n            'l',\n            'L',\n            'v',\n            'V',\n            'h',\n            'H',\n            'z',\n            'Z',\n            'c',\n            'C',\n            'q',\n            'Q',\n            't',\n            'T',\n            's',\n            'S',\n            'a',\n            'A'\n        ];\n        cs = cs.replace(new RegExp(' ', 'g'), ',');\n        for (var n = 0; n < cc.length; n++) {\n            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\n        }\n        var arr = cs.split('|');\n        var ca = [];\n        var coords = [];\n        var cpx = 0;\n        var cpy = 0;\n        var re = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/gi;\n        var match;\n        for (n = 1; n < arr.length; n++) {\n            var str = arr[n];\n            var c = str.charAt(0);\n            str = str.slice(1);\n            coords.length = 0;\n            while ((match = re.exec(str))) {\n                coords.push(match[0]);\n            }\n            var p = [];\n            for (var j = 0, jlen = coords.length; j < jlen; j++) {\n                var parsed = parseFloat(coords[j]);\n                if (!isNaN(parsed)) {\n                    p.push(parsed);\n                }\n                else {\n                    p.push(0);\n                }\n            }\n            while (p.length > 0) {\n                if (isNaN(p[0])) {\n                    break;\n                }\n                var cmd = null;\n                var points = [];\n                var startX = cpx, startY = cpy;\n                var prevCmd, ctlPtx, ctlPty;\n                var rx, ry, psi, fa, fs, x1, y1;\n                switch (c) {\n                    case 'l':\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'L':\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'm':\n                        var dx = p.shift();\n                        var dy = p.shift();\n                        cpx += dx;\n                        cpy += dy;\n                        cmd = 'M';\n                        if (ca.length > 2 && ca[ca.length - 1].command === 'z') {\n                            for (var idx = ca.length - 2; idx >= 0; idx--) {\n                                if (ca[idx].command === 'M') {\n                                    cpx = ca[idx].points[0] + dx;\n                                    cpy = ca[idx].points[1] + dy;\n                                    break;\n                                }\n                            }\n                        }\n                        points.push(cpx, cpy);\n                        c = 'l';\n                        break;\n                    case 'M':\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'M';\n                        points.push(cpx, cpy);\n                        c = 'L';\n                        break;\n                    case 'h':\n                        cpx += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'H':\n                        cpx = p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'v':\n                        cpy += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'V':\n                        cpy = p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'C':\n                        points.push(p.shift(), p.shift(), p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'c':\n                        points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'S':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'C') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[2]);\n                            ctlPty = cpy + (cpy - prevCmd.points[3]);\n                        }\n                        points.push(ctlPtx, ctlPty, p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 's':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'C') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[2]);\n                            ctlPty = cpy + (cpy - prevCmd.points[3]);\n                        }\n                        points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'Q':\n                        points.push(p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'q':\n                        points.push(cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'Q';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'T':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'Q') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[0]);\n                            ctlPty = cpy + (cpy - prevCmd.points[1]);\n                        }\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'Q';\n                        points.push(ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 't':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'Q') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[0]);\n                            ctlPty = cpy + (cpy - prevCmd.points[1]);\n                        }\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'Q';\n                        points.push(ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 'A':\n                        rx = p.shift();\n                        ry = p.shift();\n                        psi = p.shift();\n                        fa = p.shift();\n                        fs = p.shift();\n                        x1 = cpx;\n                        y1 = cpy;\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'A';\n                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\n                        break;\n                    case 'a':\n                        rx = p.shift();\n                        ry = p.shift();\n                        psi = p.shift();\n                        fa = p.shift();\n                        fs = p.shift();\n                        x1 = cpx;\n                        y1 = cpy;\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'A';\n                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\n                        break;\n                }\n                ca.push({\n                    command: cmd || c,\n                    points: points,\n                    start: {\n                        x: startX,\n                        y: startY\n                    },\n                    pathLength: this.calcLength(startX, startY, cmd || c, points)\n                });\n            }\n            if (c === 'z' || c === 'Z') {\n                ca.push({\n                    command: 'z',\n                    points: [],\n                    start: undefined,\n                    pathLength: 0\n                });\n            }\n        }\n        return ca;\n    };\n    Path.calcLength = function (x, y, cmd, points) {\n        var len, p1, p2, t;\n        var path = Path;\n        switch (cmd) {\n            case 'L':\n                return path.getLineLength(x, y, points[0], points[1]);\n            case 'C':\n                len = 0.0;\n                p1 = path.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n                for (t = 0.01; t <= 1; t += 0.01) {\n                    p2 = path.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                    p1 = p2;\n                }\n                return len;\n            case 'Q':\n                len = 0.0;\n                p1 = path.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);\n                for (t = 0.01; t <= 1; t += 0.01) {\n                    p2 = path.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);\n                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                    p1 = p2;\n                }\n                return len;\n            case 'A':\n                len = 0.0;\n                var start = points[4];\n                var dTheta = points[5];\n                var end = points[4] + dTheta;\n                var inc = Math.PI / 180.0;\n                if (Math.abs(start - end) < inc) {\n                    inc = Math.abs(start - end);\n                }\n                p1 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);\n                if (dTheta < 0) {\n                    for (t = start - inc; t > end; t -= inc) {\n                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                        p1 = p2;\n                    }\n                }\n                else {\n                    for (t = start + inc; t < end; t += inc) {\n                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                        p1 = p2;\n                    }\n                }\n                p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);\n                len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                return len;\n        }\n        return 0;\n    };\n    Path.convertEndpointToCenterParameterization = function (x1, y1, x2, y2, fa, fs, rx, ry, psiDeg) {\n        var psi = psiDeg * (Math.PI / 180.0);\n        var xp = (Math.cos(psi) * (x1 - x2)) / 2.0 + (Math.sin(psi) * (y1 - y2)) / 2.0;\n        var yp = (-1 * Math.sin(psi) * (x1 - x2)) / 2.0 +\n            (Math.cos(psi) * (y1 - y2)) / 2.0;\n        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\n        if (lambda > 1) {\n            rx *= Math.sqrt(lambda);\n            ry *= Math.sqrt(lambda);\n        }\n        var f = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) /\n            (rx * rx * (yp * yp) + ry * ry * (xp * xp)));\n        if (fa === fs) {\n            f *= -1;\n        }\n        if (isNaN(f)) {\n            f = 0;\n        }\n        var cxp = (f * rx * yp) / ry;\n        var cyp = (f * -ry * xp) / rx;\n        var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;\n        var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;\n        var vMag = function (v) {\n            return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n        };\n        var vRatio = function (u, v) {\n            return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\n        };\n        var vAngle = function (u, v) {\n            return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));\n        };\n        var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);\n        var u = [(xp - cxp) / rx, (yp - cyp) / ry];\n        var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];\n        var dTheta = vAngle(u, v);\n        if (vRatio(u, v) <= -1) {\n            dTheta = Math.PI;\n        }\n        if (vRatio(u, v) >= 1) {\n            dTheta = 0;\n        }\n        if (fs === 0 && dTheta > 0) {\n            dTheta = dTheta - 2 * Math.PI;\n        }\n        if (fs === 1 && dTheta < 0) {\n            dTheta = dTheta + 2 * Math.PI;\n        }\n        return [cx, cy, rx, ry, theta, dTheta, psi, fs];\n    };\n    return Path;\n}(Shape_1.Shape));\nexports.Path = Path;\nPath.prototype.className = 'Path';\nPath.prototype._attrsAffectingSize = ['data'];\nGlobal_1._registerNode(Path);\nFactory_1.Factory.addGetterSetter(Path, 'data');\nUtil_1.Collection.mapMethods(Path);\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/konva/lib/shapes/Path.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}}],"sources":{"node_modules/konva/lib/shapes/Path.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Util_1 = require(\"../Util\");\nvar Factory_1 = require(\"../Factory\");\nvar Shape_1 = require(\"../Shape\");\nvar Global_1 = require(\"../Global\");\nvar Path = (function (_super) {\n    __extends(Path, _super);\n    function Path(config) {\n        var _this = _super.call(this, config) || this;\n        _this.dataArray = [];\n        _this.pathLength = 0;\n        _this.dataArray = Path.parsePathData(_this.data());\n        _this.pathLength = 0;\n        for (var i = 0; i < _this.dataArray.length; ++i) {\n            _this.pathLength += _this.dataArray[i].pathLength;\n        }\n        _this.on('dataChange.konva', function () {\n            this.dataArray = Path.parsePathData(this.data());\n            this.pathLength = 0;\n            for (var i = 0; i < this.dataArray.length; ++i) {\n                this.pathLength += this.dataArray[i].pathLength;\n            }\n        });\n        return _this;\n    }\n    Path.prototype._sceneFunc = function (context) {\n        var ca = this.dataArray;\n        context.beginPath();\n        var isClosed = false;\n        for (var n = 0; n < ca.length; n++) {\n            var c = ca[n].command;\n            var p = ca[n].points;\n            switch (c) {\n                case 'L':\n                    context.lineTo(p[0], p[1]);\n                    break;\n                case 'M':\n                    context.moveTo(p[0], p[1]);\n                    break;\n                case 'C':\n                    context.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);\n                    break;\n                case 'Q':\n                    context.quadraticCurveTo(p[0], p[1], p[2], p[3]);\n                    break;\n                case 'A':\n                    var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6], fs = p[7];\n                    var r = rx > ry ? rx : ry;\n                    var scaleX = rx > ry ? 1 : rx / ry;\n                    var scaleY = rx > ry ? ry / rx : 1;\n                    context.translate(cx, cy);\n                    context.rotate(psi);\n                    context.scale(scaleX, scaleY);\n                    context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);\n                    context.scale(1 / scaleX, 1 / scaleY);\n                    context.rotate(-psi);\n                    context.translate(-cx, -cy);\n                    break;\n                case 'z':\n                    isClosed = true;\n                    context.closePath();\n                    break;\n            }\n        }\n        if (!isClosed && !this.hasFill()) {\n            context.strokeShape(this);\n        }\n        else {\n            context.fillStrokeShape(this);\n        }\n    };\n    Path.prototype.getSelfRect = function () {\n        var points = [];\n        this.dataArray.forEach(function (data) {\n            if (data.command === 'A') {\n                var start = data.points[4];\n                var dTheta = data.points[5];\n                var end = data.points[4] + dTheta;\n                var inc = Math.PI / 180.0;\n                if (Math.abs(start - end) < inc) {\n                    inc = Math.abs(start - end);\n                }\n                if (dTheta < 0) {\n                    for (var t = start - inc; t > end; t -= inc) {\n                        var point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);\n                        points.push(point.x, point.y);\n                    }\n                }\n                else {\n                    for (var t = start + inc; t < end; t += inc) {\n                        var point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);\n                        points.push(point.x, point.y);\n                    }\n                }\n            }\n            else if (data.command === 'C') {\n                for (var t = 0.0; t <= 1; t += 0.01) {\n                    var point = Path.getPointOnCubicBezier(t, data.start.x, data.start.y, data.points[0], data.points[1], data.points[2], data.points[3], data.points[4], data.points[5]);\n                    points.push(point.x, point.y);\n                }\n            }\n            else {\n                points = points.concat(data.points);\n            }\n        });\n        var minX = points[0];\n        var maxX = points[0];\n        var minY = points[1];\n        var maxY = points[1];\n        var x, y;\n        for (var i = 0; i < points.length / 2; i++) {\n            x = points[i * 2];\n            y = points[i * 2 + 1];\n            if (!isNaN(x)) {\n                minX = Math.min(minX, x);\n                maxX = Math.max(maxX, x);\n            }\n            if (!isNaN(y)) {\n                minY = Math.min(minY, y);\n                maxY = Math.max(maxY, y);\n            }\n        }\n        return {\n            x: Math.round(minX),\n            y: Math.round(minY),\n            width: Math.round(maxX - minX),\n            height: Math.round(maxY - minY)\n        };\n    };\n    Path.prototype.getLength = function () {\n        return this.pathLength;\n    };\n    Path.prototype.getPointAtLength = function (length) {\n        var point, i = 0, ii = this.dataArray.length;\n        if (!ii) {\n            return null;\n        }\n        while (i < ii && length > this.dataArray[i].pathLength) {\n            length -= this.dataArray[i].pathLength;\n            ++i;\n        }\n        if (i === ii) {\n            point = this.dataArray[i - 1].points.slice(-2);\n            return {\n                x: point[0],\n                y: point[1]\n            };\n        }\n        if (length < 0.01) {\n            point = this.dataArray[i].points.slice(0, 2);\n            return {\n                x: point[0],\n                y: point[1]\n            };\n        }\n        var cp = this.dataArray[i];\n        var p = cp.points;\n        switch (cp.command) {\n            case 'L':\n                return Path.getPointOnLine(length, cp.start.x, cp.start.y, p[0], p[1]);\n            case 'C':\n                return Path.getPointOnCubicBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3], p[4], p[5]);\n            case 'Q':\n                return Path.getPointOnQuadraticBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3]);\n            case 'A':\n                var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6];\n                theta += (dTheta * length) / cp.pathLength;\n                return Path.getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi);\n        }\n        return null;\n    };\n    Path.getLineLength = function (x1, y1, x2, y2) {\n        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    };\n    Path.getPointOnLine = function (dist, P1x, P1y, P2x, P2y, fromX, fromY) {\n        if (fromX === undefined) {\n            fromX = P1x;\n        }\n        if (fromY === undefined) {\n            fromY = P1y;\n        }\n        var m = (P2y - P1y) / (P2x - P1x + 0.00000001);\n        var run = Math.sqrt((dist * dist) / (1 + m * m));\n        if (P2x < P1x) {\n            run *= -1;\n        }\n        var rise = m * run;\n        var pt;\n        if (P2x === P1x) {\n            pt = {\n                x: fromX,\n                y: fromY + rise\n            };\n        }\n        else if ((fromY - P1y) / (fromX - P1x + 0.00000001) === m) {\n            pt = {\n                x: fromX + run,\n                y: fromY + rise\n            };\n        }\n        else {\n            var ix, iy;\n            var len = this.getLineLength(P1x, P1y, P2x, P2y);\n            if (len < 0.00000001) {\n                return undefined;\n            }\n            var u = (fromX - P1x) * (P2x - P1x) + (fromY - P1y) * (P2y - P1y);\n            u = u / (len * len);\n            ix = P1x + u * (P2x - P1x);\n            iy = P1y + u * (P2y - P1y);\n            var pRise = this.getLineLength(fromX, fromY, ix, iy);\n            var pRun = Math.sqrt(dist * dist - pRise * pRise);\n            run = Math.sqrt((pRun * pRun) / (1 + m * m));\n            if (P2x < P1x) {\n                run *= -1;\n            }\n            rise = m * run;\n            pt = {\n                x: ix + run,\n                y: iy + rise\n            };\n        }\n        return pt;\n    };\n    Path.getPointOnCubicBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {\n        function CB1(t) {\n            return t * t * t;\n        }\n        function CB2(t) {\n            return 3 * t * t * (1 - t);\n        }\n        function CB3(t) {\n            return 3 * t * (1 - t) * (1 - t);\n        }\n        function CB4(t) {\n            return (1 - t) * (1 - t) * (1 - t);\n        }\n        var x = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);\n        var y = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);\n        return {\n            x: x,\n            y: y\n        };\n    };\n    Path.getPointOnQuadraticBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y) {\n        function QB1(t) {\n            return t * t;\n        }\n        function QB2(t) {\n            return 2 * t * (1 - t);\n        }\n        function QB3(t) {\n            return (1 - t) * (1 - t);\n        }\n        var x = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);\n        var y = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);\n        return {\n            x: x,\n            y: y\n        };\n    };\n    Path.getPointOnEllipticalArc = function (cx, cy, rx, ry, theta, psi) {\n        var cosPsi = Math.cos(psi), sinPsi = Math.sin(psi);\n        var pt = {\n            x: rx * Math.cos(theta),\n            y: ry * Math.sin(theta)\n        };\n        return {\n            x: cx + (pt.x * cosPsi - pt.y * sinPsi),\n            y: cy + (pt.x * sinPsi + pt.y * cosPsi)\n        };\n    };\n    Path.parsePathData = function (data) {\n        if (!data) {\n            return [];\n        }\n        var cs = data;\n        var cc = [\n            'm',\n            'M',\n            'l',\n            'L',\n            'v',\n            'V',\n            'h',\n            'H',\n            'z',\n            'Z',\n            'c',\n            'C',\n            'q',\n            'Q',\n            't',\n            'T',\n            's',\n            'S',\n            'a',\n            'A'\n        ];\n        cs = cs.replace(new RegExp(' ', 'g'), ',');\n        for (var n = 0; n < cc.length; n++) {\n            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\n        }\n        var arr = cs.split('|');\n        var ca = [];\n        var coords = [];\n        var cpx = 0;\n        var cpy = 0;\n        var re = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/gi;\n        var match;\n        for (n = 1; n < arr.length; n++) {\n            var str = arr[n];\n            var c = str.charAt(0);\n            str = str.slice(1);\n            coords.length = 0;\n            while ((match = re.exec(str))) {\n                coords.push(match[0]);\n            }\n            var p = [];\n            for (var j = 0, jlen = coords.length; j < jlen; j++) {\n                var parsed = parseFloat(coords[j]);\n                if (!isNaN(parsed)) {\n                    p.push(parsed);\n                }\n                else {\n                    p.push(0);\n                }\n            }\n            while (p.length > 0) {\n                if (isNaN(p[0])) {\n                    break;\n                }\n                var cmd = null;\n                var points = [];\n                var startX = cpx, startY = cpy;\n                var prevCmd, ctlPtx, ctlPty;\n                var rx, ry, psi, fa, fs, x1, y1;\n                switch (c) {\n                    case 'l':\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'L':\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'm':\n                        var dx = p.shift();\n                        var dy = p.shift();\n                        cpx += dx;\n                        cpy += dy;\n                        cmd = 'M';\n                        if (ca.length > 2 && ca[ca.length - 1].command === 'z') {\n                            for (var idx = ca.length - 2; idx >= 0; idx--) {\n                                if (ca[idx].command === 'M') {\n                                    cpx = ca[idx].points[0] + dx;\n                                    cpy = ca[idx].points[1] + dy;\n                                    break;\n                                }\n                            }\n                        }\n                        points.push(cpx, cpy);\n                        c = 'l';\n                        break;\n                    case 'M':\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'M';\n                        points.push(cpx, cpy);\n                        c = 'L';\n                        break;\n                    case 'h':\n                        cpx += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'H':\n                        cpx = p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'v':\n                        cpy += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'V':\n                        cpy = p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'C':\n                        points.push(p.shift(), p.shift(), p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'c':\n                        points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'S':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'C') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[2]);\n                            ctlPty = cpy + (cpy - prevCmd.points[3]);\n                        }\n                        points.push(ctlPtx, ctlPty, p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 's':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'C') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[2]);\n                            ctlPty = cpy + (cpy - prevCmd.points[3]);\n                        }\n                        points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'Q':\n                        points.push(p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'q':\n                        points.push(cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'Q';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'T':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'Q') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[0]);\n                            ctlPty = cpy + (cpy - prevCmd.points[1]);\n                        }\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'Q';\n                        points.push(ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 't':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'Q') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[0]);\n                            ctlPty = cpy + (cpy - prevCmd.points[1]);\n                        }\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'Q';\n                        points.push(ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 'A':\n                        rx = p.shift();\n                        ry = p.shift();\n                        psi = p.shift();\n                        fa = p.shift();\n                        fs = p.shift();\n                        x1 = cpx;\n                        y1 = cpy;\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'A';\n                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\n                        break;\n                    case 'a':\n                        rx = p.shift();\n                        ry = p.shift();\n                        psi = p.shift();\n                        fa = p.shift();\n                        fs = p.shift();\n                        x1 = cpx;\n                        y1 = cpy;\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'A';\n                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\n                        break;\n                }\n                ca.push({\n                    command: cmd || c,\n                    points: points,\n                    start: {\n                        x: startX,\n                        y: startY\n                    },\n                    pathLength: this.calcLength(startX, startY, cmd || c, points)\n                });\n            }\n            if (c === 'z' || c === 'Z') {\n                ca.push({\n                    command: 'z',\n                    points: [],\n                    start: undefined,\n                    pathLength: 0\n                });\n            }\n        }\n        return ca;\n    };\n    Path.calcLength = function (x, y, cmd, points) {\n        var len, p1, p2, t;\n        var path = Path;\n        switch (cmd) {\n            case 'L':\n                return path.getLineLength(x, y, points[0], points[1]);\n            case 'C':\n                len = 0.0;\n                p1 = path.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n                for (t = 0.01; t <= 1; t += 0.01) {\n                    p2 = path.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                    p1 = p2;\n                }\n                return len;\n            case 'Q':\n                len = 0.0;\n                p1 = path.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);\n                for (t = 0.01; t <= 1; t += 0.01) {\n                    p2 = path.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);\n                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                    p1 = p2;\n                }\n                return len;\n            case 'A':\n                len = 0.0;\n                var start = points[4];\n                var dTheta = points[5];\n                var end = points[4] + dTheta;\n                var inc = Math.PI / 180.0;\n                if (Math.abs(start - end) < inc) {\n                    inc = Math.abs(start - end);\n                }\n                p1 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);\n                if (dTheta < 0) {\n                    for (t = start - inc; t > end; t -= inc) {\n                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                        p1 = p2;\n                    }\n                }\n                else {\n                    for (t = start + inc; t < end; t += inc) {\n                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                        p1 = p2;\n                    }\n                }\n                p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);\n                len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                return len;\n        }\n        return 0;\n    };\n    Path.convertEndpointToCenterParameterization = function (x1, y1, x2, y2, fa, fs, rx, ry, psiDeg) {\n        var psi = psiDeg * (Math.PI / 180.0);\n        var xp = (Math.cos(psi) * (x1 - x2)) / 2.0 + (Math.sin(psi) * (y1 - y2)) / 2.0;\n        var yp = (-1 * Math.sin(psi) * (x1 - x2)) / 2.0 +\n            (Math.cos(psi) * (y1 - y2)) / 2.0;\n        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\n        if (lambda > 1) {\n            rx *= Math.sqrt(lambda);\n            ry *= Math.sqrt(lambda);\n        }\n        var f = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) /\n            (rx * rx * (yp * yp) + ry * ry * (xp * xp)));\n        if (fa === fs) {\n            f *= -1;\n        }\n        if (isNaN(f)) {\n            f = 0;\n        }\n        var cxp = (f * rx * yp) / ry;\n        var cyp = (f * -ry * xp) / rx;\n        var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;\n        var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;\n        var vMag = function (v) {\n            return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n        };\n        var vRatio = function (u, v) {\n            return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\n        };\n        var vAngle = function (u, v) {\n            return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));\n        };\n        var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);\n        var u = [(xp - cxp) / rx, (yp - cyp) / ry];\n        var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];\n        var dTheta = vAngle(u, v);\n        if (vRatio(u, v) <= -1) {\n            dTheta = Math.PI;\n        }\n        if (vRatio(u, v) >= 1) {\n            dTheta = 0;\n        }\n        if (fs === 0 && dTheta > 0) {\n            dTheta = dTheta - 2 * Math.PI;\n        }\n        if (fs === 1 && dTheta < 0) {\n            dTheta = dTheta + 2 * Math.PI;\n        }\n        return [cx, cy, rx, ry, theta, dTheta, psi, fs];\n    };\n    return Path;\n}(Shape_1.Shape));\nexports.Path = Path;\nPath.prototype.className = 'Path';\nPath.prototype._attrsAffectingSize = ['data'];\nGlobal_1._registerNode(Path);\nFactory_1.Factory.addGetterSetter(Path, 'data');\nUtil_1.Collection.mapMethods(Path);\n"},"lineCount":648}},"error":null,"hash":"5cfe834e7560005943b913464adc56dd","cacheData":{"env":{}}}